(define (domain problem3)
    (:requirements :strips :typing :hierachie :negative-preconditions)
    (:types
        robotic_agent carrier location - object
    )

    (:predicates
        (location_robot ?r - robotic_agent ?l - location)
        (location_carrier ?c - carrier ?l - location)
        (robot_carrier_attached ?r - robotic_agent ?c - carrier)
        (carrier_has_no_robot ?c - carrier)
        (robot_has_no_carrier ?r - robotic_agent)

    )

    (:task T_move_robot
        :parameters (?r - robotic_agent ?l2 - location)
        :precondition ()
        :effect ()
    )

    (:method M_move_robot
        :parameters (?r - robotic_agent ?l1 - location ?l2 - location)
        :task
        (T_move_robot ?r ?l2)
        :subtasks(and
            (task0
                (move_robot ?r ?l1 ?l2))
        )
    )

    (:action move_robot
        :parameters (?r - robotic_agent ?l1 - location ?l2 - location)
        :precondition (and (location_robot ?r ?l1))
        :effect (and
            (not (location_robot ?r ?l1))
            (location_robot ?r ?l2)
        )
    )

    (:task T_attach_carrier_to_robot
        :parameters (?r - robotic_agent ?c - carrier)
        :precondition ()
        :effect ()
    )

    (:method M_attach_carrier_to_robot
        :parameters (?r - robotic_agent ?l1 - location ?c - carrier)
        :task
        (T_attach_carrier_to_robot ?r ?c)
        :subtasks(and
            (task0
                (attach_carrier_to_robot ?r ?l1 ?c))
        )
    )

    (:action attach_carrier_to_robot
        :parameters (?r - robotic_agent ?l1 - location ?c - carrier)
        :precondition (and (location_robot ?r ?l1) (location_carrier ?c ?l1) (carrier_has_no_robot ?c) (robot_has_no_carrier ?r))
        :effect (and (not (carrier_has_no_robot ?c)) (not (robot_has_no_carrier ?r)) (robot_carrier_attached ?r ?c))
    )

)