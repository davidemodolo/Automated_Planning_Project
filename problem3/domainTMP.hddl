(define (domain problem3TMP)
    (:requirements :strips :typing :equality :negative-preconditions :disjunctive-preconditions :conditional-effects :existential-preconditions :universal-preconditions :hierachie)
    (:types
        person robotic_agent location box carrier supply - object
        food medicine tools - supply
    )
    (:predicates
        (location_robot ?r - robotic_agent ?l - location)
        (location_box ?b - box ?l - location)
        (location_carrier ?c - carrier ?l - location)
        (location_supply ?s - supply ?l - location)
        (location_person ?p - person ?l - location)
        (box_on_carrier ?b - box ?c - carrier)
        (box_loaded ?b - box)
        (box_is_empty ?b - box)
        (box_with_supply ?b - box ?s - supply)
        (carrier_has_no_robot ?c - carrier)
        (robot_has_no_carrier ?r - robotic_agent)
        (robot_carrier_attached ?r - robotic_agent ?c - carrier)
        ; since a carrier can load only up to 4 boxes, we create all the predicates
        (carrier_has_box1 ?c - carrier)
        (carrier_has_box2 ?c - carrier)
        (carrier_has_box3 ?c - carrier)
        (carrier_has_box4 ?c - carrier)
        (carrier_loaded_1 ?c - carrier ?b - box)
        (carrier_loaded_2 ?c - carrier ?b - box)
        (carrier_loaded_3 ?c - carrier ?b - box)
        (carrier_loaded_4 ?c - carrier ?b - box)
        (delivered ?p - person ?s - supply)
    )

    (:task T_deliver_supply
        :parameters (?r - robotic_agent ?l1 - location ?p - person ?s - supply ?b - box)
        :precondition ()
        :effect ()
    )

    (:task T_deliver_1_supp
        :parameters (?p - person ?s - supply)
        :precondition ()
        :effect ()
    )

    (:task T_deliver_2_supp
        :parameters (?p - person ?s1 - supply ?s2 - supply)
        :precondition ()
        :effect ()
    )

    (:task T_deliver_3_supp
        :parameters (?p - person ?s1 - supply ?s2 - supply ?s3 - supply)
        :precondition ()
        :effect ()
    )

    (:task T_move_robot
        :parameters (?r - robotic_agent ?l2 - location)
        :precondition ()
        :effect ()
    )

    (:task T_move_robot_with_carrier
        :parameters (?r - robotic_agent ?c -carrier ?l2 - location)
        :precondition ()
        :effect ()
    )

    (:task T_attach_carrier_to_robot
        :parameters (?r - robotic_agent ?c - carrier)
        :precondition ()
        :effect ()
    )

    (:task T_detatch_carrier_from_robot
        :parameters (?r - robotic_agent ?c - carrier)
        :precondition ()
        :effect ()
    )

    (:task T_load_box_on_carrier
        :parameters (?c - carrier ?b - box )
        :precondition ()
        :effect ()
    )

    (:task T_unload_box_from_carrier
        :parameters (?c - carrier ?b - box)
        :precondition ()
        :effect ()
    )

    (:task T_fill_box_with_supply
        :parameters (?b - box ?s - supply)
        :precondition ()
        :effect ()
    )

    (:task T_empty_box_from_supply
        :parameters (?b - box ?s - supply)
        :precondition ()
        :effect ()
    )

    (:method M_deliver_1_supply
        :parameters(?r - robotic_agent ?l1 - location ?l2 - location ?p - person ?s - supply ?b - box ?c - carrier)
        :task
        (T_deliver_1_supp ?p ?s)
        :subtasks(and
            (task0
                (T_fill_box_with_supply ?b ?s))
            (task1
                (T_load_box_on_carrier ?c ?b))
            (task2
                (T_move_robot_with_carrier ?r ?c ?l2))
            (task3
                (T_unload_box_from_carrier ?c ?b))
            ; (task4
            ;     (T_empty_box_from_supply ?r ?l2 ?b ?s))
            (task4
            ; (?r - robotic_agent ?l1 - location ?p - person ?s - supply ?b - box)
                (T_deliver_supply ?p ?s))
        )
        :ordering(and
            (task0 < task1)
            (task1 < task2)
            (task2 < task3)
            (task3 < task4)
        )

    )

    (:method M_deliver_2_supplies
        :parameters(?r - robotic_agent ?l1 - location ?l2 - location ?p - person ?s1 - supply ?s2 - supply ?b1 - box ?b2 - box ?c - carrier)
        :task
        (T_deliver_2_supp ?p ?s1 ?s2) ; since this does not work (and (deliver_supply ?p ?s1) (deliver_supply ?p ?s2))
        :subtasks(and
            (task0
                (T_fill_box_with_supply ?b1 ?s1))
            (task1
                (T_load_box_on_carrier ?c ?b2))
            (task2
                (T_fill_box_with_supply ?b2 ?s2))
            (task3
                (T_load_box_on_carrier ?c ?b1))
            (task4
                (T_move_robot_with_carrier ?r ?c ?l2))
            (task5
                (T_unload_box_from_carrier ?c ?b1))
            (task6
                (T_empty_box_from_supply ?b1 ?s1))
            (task7
                (T_unload_box_from_carrier ?c ?b2))
            (task8
                (T_empty_box_from_supply ?b2 ?s2))
            (task9
                (T_deliver_supply ?p ?s1 ))
            (task10
                (T_deliver_supply ?p ?s2))
        )
        :ordering(and
            (task0 < task1)
            (task1 < task2)
            (task2 < task3)
            (task3 < task4)
            (task4 < task5)
            (task5 < task6)
            (task6 < task7)
            (task7 < task8)
            (task8 < task9)
            (task9 < task10)
        )
    )

    (:method M_deliver_3_supplies
        :parameters(?r - robotic_agent ?l1 - location ?l2 - location ?p - person ?s1 - supply ?s2 - supply ?s3 - supply ?b1 - box ?b2 - box ?b3 - box ?c - carrier)
        :task
        (T_deliver_3_supp ?p ?s1 ?s2 ?s3) ; since this does not work (and (deliver_supply ?p ?s1) (deliver_supply ?p ?s2))
        :subtasks(and
            (task0
                (T_fill_box_with_supply ?b1 ?s1))
            (task1
                (T_load_box_on_carrier ?c ?b2))
            (task2
                (T_fill_box_with_supply ?b2 ?s2))
            (task3
                (T_load_box_on_carrier ?c ?b1))
            (task4
                (T_fill_box_with_supply ?b3 ?s3))
            (task5
                (T_load_box_on_carrier ?c ?b2))
            (task6
                (T_move_robot_with_carrier ?r ?c ?l2))
            (task7
                (T_unload_box_from_carrier ?c ?b1))
            (task8
                (T_empty_box_from_supply ?b1 ?s1))
            (task9
                (T_unload_box_from_carrier ?c ?b2))
            (task10
                (T_empty_box_from_supply ?b2 ?s2))
            (task11
                (T_unload_box_from_carrier ?c ?b3))
            (task12
                (T_empty_box_from_supply ?b3 ?s3))
            (task13
                (T_deliver_supply ?p ?s1))
            (task14
                (T_deliver_supply ?p ?s2))
            (task15
                (T_deliver_supply ?p ?s3))
        )
        :ordering(and
            (task0 < task1)
            (task1 < task2)
            (task2 < task3)
            (task3 < task4)
            (task4 < task5)
            (task5 < task6)
            (task6 < task7)
            (task7 < task8)
            (task8 < task9)
            (task9 < task10)
            (task10 < task11)
            (task11 < task12)
            (task12 < task13)
            (task13 < task14)
            (task14 < task15)
        )
    )

    (:method M_move_robot
        :parameters (?r - robotic_agent ?l1 - location ?l2 - location)
        :task
        (T_move_robot ?r ?l2)
        :subtasks(and
            (task0
                (move_robot ?r ?l1 ?l2))
        )
    )

    (:method M_move_robot_with_carrier_no_box
        :parameters (?r - robotic_agent ?l1 - location ?l2 - location ?c - carrier)
        :task
        (T_move_robot_with_carrier ?r ?c ?l2)
        :subtasks(and
            (task0
                (move_robot_with_carrier_no_box ?r ?l1 ?l2 ?c))
        )
    )

    (:method M_move_robot_with_carrier_1_box
        :parameters (?r - robotic_agent ?l1 - location ?l2 - location ?c - carrier ?b - box)
        :task
        (T_move_robot_with_carrier ?r ?c ?l2)
        :subtasks(and
            (task0
                (move_robot_with_carrier_box1 ?r ?l1 ?l2 ?c ?b))
        )
    )

    (:method M_move_robot_with_carrier_12_box
        :parameters (?r - robotic_agent ?l1 - location ?l2 - location ?c - carrier ?b1 - box ?b2 - box)
        :task
        (T_move_robot_with_carrier ?r ?c ?l2)
        :subtasks(and
            (task0
                (move_robot_with_carrier_box12 ?r ?l1 ?l2 ?c ?b1 ?b2))
        )
    )

    (:method M_move_robot_with_carrier_123_box
        :parameters (?r - robotic_agent ?l1 - location ?l2 - location ?c - carrier ?b1 - box ?b2 - box ?b3 - box)
        :task
        (T_move_robot_with_carrier ?r ?c ?l2)
        :subtasks(and
            (task0
                (move_robot_with_carrier_box123 ?r ?l1 ?l2 ?c ?b1 ?b2 ?b3))
        )
    )

    (:method M_move_robot_with_carrier_1234_box
        :parameters (?r - robotic_agent ?l1 - location ?l2 - location ?c - carrier ?b1 - box ?b2 - box ?b3 - box ?b4 - box)
        :task
        (T_move_robot_with_carrier ?r ?c ?l2)
        :subtasks(and
            (task0
                (move_robot_with_carrier_box1234 ?r ?l1 ?l2 ?c ?b1 ?b2 ?b3 ?b4))
        )
    )

    (:method M_attach_carrier_to_robot
        :parameters (?r - robotic_agent ?l1 - location ?c - carrier)
        :task
        (T_attach_carrier_to_robot ?r ?c)
        :subtasks(and
            (task0
                (attach_carrier_to_robot ?r ?l1 ?c))
        )
    )

    (:method M_detatch_carrier_from_robot
        :parameters (?r - robotic_agent ?l1 - location ?c - carrier)
        :task
        (T_detatch_carrier_from_robot ?r ?c)
        :subtasks(and
            (task0
                (detatch_carrier_from_robot ?r ?l1 ?c))
        )
    )

    (:method M_load_box_on_carrier_1
        :parameters (?r - robotic_agent ?l1 - location ?b - box ?s - supply ?c - carrier)
        :task
        (T_load_box_on_carrier ?c ?b)
        :subtasks(and
            (task0
                (load_box1_on_carrier ?c ?b ?l1 ?r))
        )
    )

    (:method M_load_box_on_carrier_2
        :parameters (?r - robotic_agent ?l1 - location ?b - box ?s - supply ?c - carrier)
        :task
        (T_load_box_on_carrier ?c ?b)
        :subtasks(and
            (task0
                (load_box2_on_carrier ?c ?b ?l1 ?r))
        )
    )

    (:method M_load_box_on_carrier_3
        :parameters (?r - robotic_agent ?l1 - location ?b - box ?s - supply ?c - carrier)
        :task
        (T_load_box_on_carrier ?c ?b)
        :subtasks(and
            (task0
                (load_box3_on_carrier ?c ?b ?l1 ?r))
        )
    )

    (:method M_load_box_on_carrier_4
        :parameters (?r - robotic_agent ?l1 - location ?b - box ?s - supply ?c - carrier)
        :task
        (T_load_box_on_carrier ?c ?b)
        :subtasks(and
            (task0
                (load_box4_on_carrier ?c ?b ?l1 ?r))
        )
    )

    (:method M_unload_box_from_carrier_1
        :parameters (?r - robotic_agent ?l1 - location ?b - box ?s - supply ?c - carrier)
        :task
        (T_unload_box_from_carrier ?c ?b)
        :subtasks(and
            (task0
                (unload_box1_from_carrier ?c ?b ?l1 ?r))
        )
    )

    (:method M_unload_box_from_carrier_2
        :parameters (?r - robotic_agent ?l1 - location ?b - box ?s - supply ?c - carrier)
        :task
        (T_unload_box_from_carrier ?c ?b)
        :subtasks(and
            (task0
                (unload_box2_from_carrier ?c ?b ?l1 ?r))
        )
    )

    (:method M_unload_box_from_carrier_3
        :parameters (?r - robotic_agent ?l1 - location ?b - box ?s - supply ?c - carrier)
        :task
        (T_unload_box_from_carrier ?c ?b)
        :subtasks(and
            (task0
                (unload_box3_from_carrier ?c ?b ?l1 ?r))
        )
    )

    (:method M_unload_box_from_carrier_4
        :parameters (?r - robotic_agent ?l1 - location ?b - box ?s - supply ?c - carrier)
        :task
        (T_unload_box_from_carrier ?c ?b)
        :subtasks(and
            (task0
                (unload_box4_from_carrier ?c ?b ?l1 ?r))
        )
    )

    (:method M_fill_box_with_supply
        :parameters (?r - robotic_agent ?l1 - location ?b - box ?s - supply)
        :task
        (T_fill_box_with_supply  ?b ?s)
        :subtasks(and
            (task0
                (fill_box ?r ?l1 ?b ?s))
        )
    )

    (:method M_empty_box_from_supply
        :parameters (?r - robotic_agent ?l1 - location ?b - box ?s - supply)
        :task
        (T_empty_box_from_supply ?b ?s)
        :subtasks(and
            (task0
                (empty_box ?r ?l1 ?b ?s))
        )
    )

    (:method M_deliver_supply
        :parameters (?r - robotic_agent ?l1 - location ?p - person ?s - supply ?b - box)
        :task
        (T_deliver_1_supp ?p ?s)
        :subtasks(and
            (task0
                (deliver ?r ?l1 ?p ?s ?b))
        )
    )

;     ; actions for elements already true
    (:method M_carrier_already_at_location
		:parameters (?c - carrier ?r - robotic_agent ?l1 - location ?l2 - location)
		:task (T_move_robot_with_carrier ?c ?r ?l1 ?l2)
		:subtasks (and
		    (task0 (carrier_already_at_location ?c ?l2))
		)
	)

    (:action carrier_already_at_location
        :parameters (?c - carrier ?l - location)
        :precondition (location_carrier ?c ?l)
        :effect ()
    )

    (:method M_robot_already_at_location
		:parameters (?r - robotic_agent ?l1 - location ?l2 - location)
		:task (T_move_robot ?r ?r ?l1 ?l2)
		:subtasks (and
		    (task0 (robot_already_at_location ?r ?l2))
		)
	)

    (:action robot_already_at_location
        :parameters (?r - robotic_agent ?l - location)
        :precondition (location_robot ?r ?l)
        :effect ()
    )
    
    (:method M_box_already_filled
		:parameters (?r - robotic_agent ?l - location ?s - supply ?b - box)
		:task (T_fill_box_with_supply ?r ?l ?b ?s)
		:subtasks (and
		    (task0 (box_already_filled ?b))
		)
	)

    (:action box_already_filled
        :parameters (?b - box)
        :precondition (not (box_is_empty ?b))
        :effect ()
    )

    (:method M_box_already_loaded
        :parameters (?r - robotic_agent ?l - location ?c - carrier ?b - box)
        :task (T_load_box_on_carrier ?c ?b ?l ?r)
        :subtasks (and
            (task0 (box_already_loaded ?b))
        )
    )

    (:action box_already_loaded
        :parameters (?b - box)
        :precondition (box_loaded ?b)
        :effect ()
    )

    ; (:method M_box_already_loaded_with_carrier
    ; :parameters (?r - robotic_agent ?l - location ?b - box ?c - carrier)
    ; :task (T_load_box_on_carrier ?c ?b ?l ?r )
    ; :subtasks (and
    ;     (task0 (box_already_loaded_with_carrier ?b))
    ; )
    ; )

    ; (:action box_already_loaded_with_carrier
    ;     :parameters (?b - box ?c - carrier)
    ;     :precondition (and (box_loaded ?b) (box_on_carrier ?b ?c))
    ;     :effect ()
    ; )

   (:method M_box_already_unloaded
    :parameters (?r - robotic_agent ?l - location ?c - carrier ?b - box)
    :task (T_unload_box_from_carrier ?c ?b ?l ?r)
    :subtasks (and
        (task0 (box_already_unloaded ?b))
    )
    )

    (:action box_already_unloaded
        :parameters (?b - box)
        :precondition (not (box_loaded ?b))
        :effect ()
    )

    (:method M_box_already_empty
    :parameters (?r - robotic_agent ?l - location ?s - supply ?b - box)
    :task (T_empty_box_from_supply ?r ?l ?b ?s)
    :subtasks (and
        (task0 (box_already_empty ?b))
    )
    )

    (:action box_already_empty
        :parameters (?b - box)
        :precondition (box_is_empty ?b)
        :effect ()
    )






    ; ----- OLD ACTIONS -----
    ; -----------------------
    ; move the robot
    (:action move_robot
        :parameters (?r - robotic_agent ?l1 - location ?l2 - location)
        :precondition (and (location_robot ?r ?l1) (not (= ?l1 ?l2)) (robot_has_no_carrier ?r))
        :effect (and
            (not (location_robot ?r ?l1))
            (location_robot ?r ?l2)
        )
    )

    ; attach a carrier to a robot
    (:action attach_carrier_to_robot
        :parameters (?r - robotic_agent ?l1 - location ?c - carrier)
        :precondition (and (location_robot ?r ?l1) (location_carrier ?c ?l1) (carrier_has_no_robot ?c) (robot_has_no_carrier ?r))
        :effect (and (not (carrier_has_no_robot ?c)) (not (robot_has_no_carrier ?r)) (robot_carrier_attached ?r ?c))
    )

    ; detatch a carrier from a robot
    (:action detatch_carrier_from_robot
        :parameters (?r - robotic_agent ?l1 - location ?c - carrier)
        :precondition (and (location_robot ?r ?l1) (robot_carrier_attached ?r ?c))
        :effect (and (carrier_has_no_robot ?c) (robot_has_no_carrier ?r)
            (not (robot_carrier_attached ?r ?c)))
    )

    ; move a robot with a carrier attached
    (:action move_robot_with_carrier_no_box
        :parameters (?r - robotic_agent ?l1 - location ?l2 - location ?c - carrier)
        :precondition (and
            (location_robot ?r ?l1)
            (location_carrier ?c ?l1)
            (robot_carrier_attached ?r ?c)
            (not (= ?l1 ?l2))
            (not (carrier_has_box1 ?c))
            (not (carrier_has_box2 ?c))
            (not (carrier_has_box3 ?c))
            (not (carrier_has_box4 ?c))
        )
        :effect (and
            (not (location_robot ?r ?l1))
            (location_robot ?r ?l2)
            (not (location_carrier ?c ?l1))
            (location_carrier ?c ?l2)
        )
    )

    (:action move_robot_with_carrier_box1
        :parameters (?r - robotic_agent ?l1 - location ?l2 - location ?c - carrier ?b - box)
        :precondition (and
            (location_robot ?r ?l1)
            (location_carrier ?c ?l1)
            (location_box ?b ?l1)
            (robot_carrier_attached ?r ?c)
            (not (= ?l1 ?l2)) (carrier_has_box1 ?c)
            (carrier_loaded_1 ?c ?b)
            (not (carrier_has_box2 ?c)) (not (carrier_has_box3 ?c)) (not (carrier_has_box4 ?c))
            (box_loaded ?b)
        )
        :effect (and
            (not (location_robot ?r ?l1))
            (location_robot ?r ?l2)
            (not (location_carrier ?c ?l1))
            (location_carrier ?c ?l2)
            (not (location_box ?b ?l1))
            (location_box ?b ?l2)
        )
    )

    (:action move_robot_with_carrier_box12
        :parameters (?r - robotic_agent ?l1 - location ?l2 - location ?c - carrier ?b1 - box ?b2 - box)
        :precondition (and
            (location_robot ?r ?l1)
            (location_carrier ?c ?l1)
            (location_box ?b1 ?l1)
            (location_box ?b2 ?l1)
            (robot_carrier_attached ?r ?c)
            (not (= ?l1 ?l2)) (carrier_has_box1 ?c) (carrier_has_box2 ?c)
            (carrier_loaded_1 ?c ?b1) (carrier_loaded_2 ?c ?b2)
            (not (carrier_has_box3 ?c)) (not (carrier_has_box4 ?c))
            (box_loaded ?b1) (box_loaded ?b2)
        )
        :effect (and
            (not (location_robot ?r ?l1))
            (location_robot ?r ?l2)
            (not (location_carrier ?c ?l1))
            (location_carrier ?c ?l2)
            (not (location_box ?b1 ?l1))
            (location_box ?b1 ?l2)
            (not (location_box ?b2 ?l1))
            (location_box ?b2 ?l2)
        )

    )

    (:action move_robot_with_carrier_box123
        :parameters (?r - robotic_agent ?l1 - location ?l2 - location ?c - carrier ?b1 - box ?b2 - box ?b3 - box)
        :precondition (and
            (location_robot ?r ?l1)
            (location_carrier ?c ?l1)
            (location_box ?b1 ?l1)
            (location_box ?b2 ?l1)
            (location_box ?b3 ?l1)
            (robot_carrier_attached ?r ?c)
            (not (= ?l1 ?l2)) (carrier_has_box1 ?c) (carrier_has_box2 ?c) (carrier_has_box3 ?c)
            (carrier_loaded_1 ?c ?b1) (carrier_loaded_2 ?c ?b2) (carrier_loaded_3 ?c ?b3)
            (box_loaded ?b1) (box_loaded ?b2) (box_loaded ?b3)
            (not (carrier_has_box4 ?c))
        )
        :effect (and
            (not (location_robot ?r ?l1))
            (location_robot ?r ?l2)
            (not (location_carrier ?c ?l1))
            (location_carrier ?c ?l2)
            (not (location_box ?b1 ?l1))
            (location_box ?b1 ?l2)
            (not (location_box ?b2 ?l1))
            (location_box ?b2 ?l2)
            (not (location_box ?b3 ?l1))
            (location_box ?b3 ?l2)
        )
    )

    (:action move_robot_with_carrier_box1234
        :parameters (?r - robotic_agent ?l1 - location ?l2 - location ?c - carrier ?b1 - box ?b2 - box ?b3 - box ?b4 - box)
        :precondition (and
            (location_robot ?r ?l1)
            (location_carrier ?c ?l1)
            (location_box ?b1 ?l1)
            (location_box ?b2 ?l1)
            (location_box ?b3 ?l1)
            (location_box ?b4 ?l1)
            (robot_carrier_attached ?r ?c)
            (not (= ?l1 ?l2)) (carrier_has_box1 ?c) (carrier_has_box2 ?c) (carrier_has_box3 ?c) (carrier_has_box4 ?c)
            (carrier_loaded_1 ?c ?b1) (carrier_loaded_2 ?c ?b2) (carrier_loaded_3 ?c ?b3) (carrier_loaded_4 ?c ?b4)
            (box_loaded ?b1) (box_loaded ?b2) (box_loaded ?b3) (box_loaded ?b4)
        )
        :effect (and
            (not (location_robot ?r ?l1))
            (location_robot ?r ?l2)
            (not (location_carrier ?c ?l1))
            (location_carrier ?c ?l2)
            (not (location_box ?b1 ?l1))
            (location_box ?b1 ?l2)
            (not (location_box ?b2 ?l1))
            (location_box ?b2 ?l2)
            (not (location_box ?b3 ?l1))
            (location_box ?b3 ?l2)
            (not (location_box ?b4 ?l1))
            (location_box ?b4 ?l2)
        )
    )

    ; assumption: a box can be loaded by a robot even if it is not attached to the carrier
    (:action load_box1_on_carrier
        :parameters (?c - carrier ?b - box ?l - location ?r - robotic_agent)
        :precondition (and
            (location_carrier ?c ?l)
            (location_box ?b ?l)
            (location_robot ?r ?l)
            (not (box_loaded ?b))
            (not(carrier_has_box1 ?c))
        )
        :effect (and
            (box_on_carrier ?b ?c)
            (box_loaded ?b)
            (carrier_has_box1 ?c)
            (carrier_loaded_1 ?c ?b)
        )
    )

    ; now the unload
    (:action unload_box1_from_carrier
        :parameters (?c - carrier ?b - box ?l - location ?r - robotic_agent)
        :precondition (and
            (location_carrier ?c ?l)
            (location_box ?b ?l)
            (box_on_carrier ?b ?c)
            (box_loaded ?b)
            (location_robot ?r ?l)
            (carrier_loaded_1 ?c ?b)
            (carrier_has_box1 ?c)
            (not (carrier_has_box2 ?c)) (not (carrier_has_box3 ?c)) (not (carrier_has_box4 ?c))
        )
        :effect (and
            (not (box_on_carrier ?b ?c))
            (not (box_loaded ?b))
            (location_box ?b ?l)
            (not (carrier_has_box1 ?c))
            (not (carrier_loaded_1 ?c ?b))
        )
    )

    (:action load_box2_on_carrier
        :parameters (?c - carrier ?b - box ?l - location ?r - robotic_agent)
        :precondition (and
            (location_carrier ?c ?l)
            (location_box ?b ?l)
            (location_robot ?r ?l)
            (not (box_loaded ?b))
            (carrier_has_box1 ?c)
            (not(carrier_has_box2 ?c))
        )
        :effect (and
            (box_on_carrier ?b ?c)
            (box_loaded ?b)
            (carrier_has_box2 ?c)
            (carrier_loaded_2 ?c ?b)
        )
    )

    (:action unload_box2_from_carrier
        :parameters (?c - carrier ?b - box ?l - location ?r - robotic_agent)
        :precondition (and
            (location_carrier ?c ?l)
            (location_box ?b ?l)
            (box_on_carrier ?b ?c)
            (box_loaded ?b)
            (location_robot ?r ?l)
            (carrier_loaded_2 ?c ?b)
            (carrier_has_box2 ?c)
            (not (carrier_has_box3 ?c)) (not (carrier_has_box4 ?c))
        )
        :effect (and
            (not (box_on_carrier ?b ?c))
            (not (box_loaded ?b))
            (location_box ?b ?l)
            (not (carrier_has_box2 ?c))
            (not (carrier_loaded_2 ?c ?b))
        )
    )

    (:action load_box3_on_carrier
        :parameters (?c - carrier ?b - box ?l - location ?r - robotic_agent)
        :precondition (and
            (location_carrier ?c ?l)
            (location_box ?b ?l)
            (location_robot ?r ?l)
            (not (box_loaded ?b))
            (carrier_has_box1 ?c)
            (carrier_has_box2 ?c)
            (not(carrier_has_box3 ?c))
        )
        :effect (and
            (box_on_carrier ?b ?c)
            (box_loaded ?b)
            (carrier_has_box3 ?c)
            (carrier_loaded_3 ?c ?b)
        )
    )

    (:action unload_box3_from_carrier
        :parameters (?c - carrier ?b - box ?l - location ?r - robotic_agent)
        :precondition (and
            (location_carrier ?c ?l)
            (location_box ?b ?l)
            (box_on_carrier ?b ?c)
            (box_loaded ?b)
            (location_robot ?r ?l)
            (carrier_loaded_3 ?c ?b)
            (carrier_has_box3 ?c)
            (not (carrier_has_box4 ?c))
        )
        :effect (and
            (not (box_on_carrier ?b ?c))
            (not (box_loaded ?b))
            (location_box ?b ?l)
            (not (carrier_has_box3 ?c))
            (not (carrier_loaded_3 ?c ?b))
        )
    )

    (:action load_box4_on_carrier
        :parameters (?c - carrier ?b - box ?l - location ?r - robotic_agent)
        :precondition (and
            (location_carrier ?c ?l)
            (location_box ?b ?l)
            (location_robot ?r ?l)
            (not (box_loaded ?b))
            (carrier_has_box1 ?c)
            (carrier_has_box2 ?c)
            (carrier_has_box3 ?c)
            (not(carrier_has_box4 ?c))
        )
        :effect (and
            (box_on_carrier ?b ?c)
            (box_loaded ?b)
            (carrier_has_box4 ?c)
            (carrier_loaded_4 ?c ?b)
        )
    )

    (:action unload_box4_from_carrier
        :parameters (?c - carrier ?b - box ?l - location ?r - robotic_agent)
        :precondition (and
            (location_carrier ?c ?l)
            (location_box ?b ?l)
            (box_on_carrier ?b ?c)
            (box_loaded ?b)
            (location_robot ?r ?l)
            (carrier_loaded_4 ?c ?b)
            (carrier_has_box4 ?c)
        )
        :effect (and
            (not (box_on_carrier ?b ?c))
            (not (box_loaded ?b))
            (location_box ?b ?l)
            (not (carrier_has_box4 ?c))
            (not (carrier_loaded_4 ?c ?b))
        )
    )

    (:action fill_box ; box is required to not be on a carrier to be filled
        :parameters (?r - robotic_agent ?l1 - location ?b - box ?s - supply)
        :precondition (and (location_robot ?r ?l1) (location_supply ?s ?l1) (box_is_empty ?b) (location_box ?b ?l1) (not (box_loaded ?b)))
        :effect (and (not (location_supply ?s ?l1)) (box_with_supply ?b ?s) (not (box_is_empty ?b)))
    )

    (:action empty_box
        :parameters (?r - robotic_agent ?l1 - location ?b - box ?s - supply)
        :precondition (and (location_robot ?r ?l1) (location_supply ?s ?l1) (box_with_supply ?b ?s) (not (box_is_empty ?b)) (location_box ?b ?l1) (not (box_loaded ?b)))
        :effect (and (location_supply ?s ?l1) (not (box_with_supply ?b ?s)) (box_is_empty ?b))
    )

    (:action deliver ; box is required to not be on a carrier to have its supply delivered
        :parameters (?r - robotic_agent ?l1 - location ?p - person ?s - supply ?b - box)
        :precondition (and (location_robot ?r ?l1) (location_person ?p ?l1) (location_box ?b ?l1) (box_with_supply ?b ?s) (not (box_is_empty ?b)) (not (box_loaded ?b)))
        :effect (and (not (box_with_supply ?b ?s)) (delivered ?p ?s) (box_is_empty ?b))
    )

)